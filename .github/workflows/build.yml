on:
  push:
    tags:
      - '*'

env:
  ProjectName: chataigne-docker
  RepositoryOwner: simon511000
  ImageName: chataigne

jobs:
  linux:
    #if: false # tmp disable

    name: Linux
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        include:
        - arch: x64
          buildFolder: "LinuxMakefile"
          buildConfig: "Release"
          
        - arch: armhf
          packageArch: armhf
          buildFolder: "Raspberry"
          buildConfig: "Release"

        # - arch: aarch64
        #   packageArch: arm64
        #   buildFolder: "Raspberry"
        #   buildConfig: "Release64"
          
      fail-fast: false

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
        with:
          submodules: 'recursive'

      - name: Checkout JUCE
        uses: actions/checkout@v2
        with:
          repository: benkuper/JUCE
          ref: develop-local
          path: JUCE

      - name: Set Suffix
        id: set_variables
        uses: ./.github/actions/set-suffix
        with:
          os: ${{ matrix.arch }}

      - name: Installing dependencies
        id: install_deps
        #shell: bash {0} # Opt out of fail-fast behavior (necessary to ignore fetch errors)
        run: |
          echo "Target system architecture: ${{ matrix.arch }}"
          if [ "${{ matrix.arch }}" != "x64" ]; 
          then

            DEP_ARCH="${{ matrix.packageArch }}"

            sudo tee /etc/apt/sources.list << END
          deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse
          deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse
          deb [arch=amd64] http://us.archive.ubuntu.com/ubuntu/ bionic-backports main restricted universe multiverse
          deb [arch=amd64] http://security.ubuntu.com/ubuntu bionic-security main restricted universe multiverse

          deb [arch=$DEP_ARCH] http://ports.ubuntu.com/ubuntu-ports/ bionic main restricted universe multiverse
          deb [arch=$DEP_ARCH] http://ports.ubuntu.com/ubuntu-ports/ bionic-updates main restricted universe multiverse
          deb [arch=$DEP_ARCH] http://ports.ubuntu.com/ubuntu-ports/ bionic-backports main restricted universe multiverse
          deb [arch=$DEP_ARCH] http://ports.ubuntu.com/ubuntu-ports/ bionic-security main restricted universe multiverse
          END

            sudo dpkg --add-architecture $DEP_ARCH
            sudo apt-get update

            if [ "${{ matrix.arch }}" == "armhf" ]; 
            then
              sudo apt-get install -qy g++-arm-linux-gnueabihf
            else
              sudo apt-get install -qy g++-aarch64-linux-gnu
            fi

            echo "Installing extra lib dependencies"
            sudo apt-get install -qyf linux-libc-dev:$DEP_ARCH libgdk-pixbuf2.0-dev:$DEP_ARCH libpango1.0-dev:$DEP_ARCH libsoup2.4-dev:$DEP_ARCH libharfbuzz-dev:$DEP_ARCH libicu-dev:$DEP_ARCH libc6-dev:$DEP_ARCH libxft-dev:$DEP_ARCH libatomic1:$DEP_ARCH libatomic1-$DEP_ARCH-cross

            echo "Downloading AppImage runtime for ${{ matrix.arch }}"
            cd ${{ github.workspace }}
            wget "https://github.com/AppImage/AppImageKit/releases/download/12/runtime-${{ matrix.arch }}"
            echo "::set-output name=appImageRuntime::--runtime-file ${{ github.workspace }}/runtime-${{ matrix.arch }}"
          fi

          sudo apt-get update
          echo "Installing JUCE lib dependencies and extra tools"
          sudo apt-get install -qyf libcurl3-gnutls:$DEP_ARCH libfreetype6-dev:$DEP_ARCH libx11-dev:$DEP_ARCH libxinerama-dev:$DEP_ARCH libxrandr-dev:$DEP_ARCH libxcursor-dev:$DEP_ARCH libxcomposite-dev:$DEP_ARCH mesa-common-dev:$DEP_ARCH libasound2-dev:$DEP_ARCH freeglut3-dev:$DEP_ARCH libcurl4-gnutls-dev:$DEP_ARCH libasound2-dev:$DEP_ARCH libjack-dev:$DEP_ARCH libbluetooth-dev:$DEP_ARCH libgtk-3-dev:$DEP_ARCH libwebkit2gtk-4.0-dev:$DEP_ARCH libsdl2-dev:$DEP_ARCH  libfuse2:$DEP_ARCH libusb-1.0-0-dev:$DEP_ARCH libhidapi-dev:$DEP_ARCH ladspa-sdk:$DEP_ARCH libssl-dev:$DEP_ARCH tree
          sudo apt-get install -qy curl

          cd ${{ github.workspace }}
          wget "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage"
          chmod a+x appimagetool-x86_64.AppImage

      - name: Build
        run: |
          if [ "${{ matrix.arch }}" == "armhf" ]; 
          then
            export CXX=arm-linux-gnueabihf-g++
            export CC=arm-linux-gnueabihf-gcc
            export PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig
          fi

          if [ "${{ matrix.arch }}" == "aarch64" ]; 
          then
            export CXX=aarch64-linux-gnu-gcc
            export CC=aarch64-linux-gnu-g++
            export PKG_CONFIG_PATH=/usr/lib/aarch64-linux-gnu/pkgconfig
          fi

          cd ${{ github.workspace }}/Builds/${{ matrix.buildFolder }}
          make -j2 CONFIG=${{ matrix.buildConfig }}
      
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      -
        name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_TOKEN }}

      -
        name: Build and push amd64
        uses: docker/build-push-action@v3
        if: matrix.arch == 'x64'
        with:
          push: true
          build-args: |
            REPOSITORY_OWNER=${{ env.RepositoryOwner }}
            IMAGE_NAME=${{ env.ImageName }}
          context: ./Builds/${{ matrix.buildFolder }}
          file: ./Builds/${{ matrix.buildFolder }}/Dockerfile
          tags: ghcr.io/${{ env.RepositoryOwner }}/${{ env.ImageName }}:${{ env.GITHUB_REF_NAME }}-amd64
          platforms: linux/amd64
          
      
      -
        name: Build and push armhf
        uses: docker/build-push-action@v3
        if: matrix.arch == 'armhf'
        with:
          push: true
          build-args: |
            REPOSITORY_OWNER=${{ env.RepositoryOwner }}
            IMAGE_NAME=${{ env.ImageName }}4
          context: ./Builds/${{ matrix.buildFolder }}
          file: ./Builds/${{ matrix.buildFolder }}/Dockerfile
          tags: ghcr.io/${{ env.RepositoryOwner }}/${{ env.ImageName }}:${GITHUB_REF_NAME}-armv7
          platforms: linux/arm/v7